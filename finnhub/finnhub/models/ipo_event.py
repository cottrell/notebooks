# coding: utf-8

"""
    Finnhub API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IPOEvent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'symbol': 'str',
        '_date': 'date',
        'exchange': 'str',
        'name': 'str',
        'status': 'str',
        'price': 'str',
        'number_of_shares': 'float',
        'total_shares_value': 'float'
    }

    attribute_map = {
        'symbol': 'symbol',
        '_date': 'date',
        'exchange': 'exchange',
        'name': 'name',
        'status': 'status',
        'price': 'price',
        'number_of_shares': 'numberOfShares',
        'total_shares_value': 'totalSharesValue'
    }

    def __init__(self, symbol=None, _date=None, exchange=None, name=None, status=None, price=None, number_of_shares=None, total_shares_value=None, _configuration=None):  # noqa: E501
        """IPOEvent - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._symbol = None
        self.__date = None
        self._exchange = None
        self._name = None
        self._status = None
        self._price = None
        self._number_of_shares = None
        self._total_shares_value = None
        self.discriminator = None

        if symbol is not None:
            self.symbol = symbol
        if _date is not None:
            self._date = _date
        if exchange is not None:
            self.exchange = exchange
        if name is not None:
            self.name = name
        if status is not None:
            self.status = status
        if price is not None:
            self.price = price
        if number_of_shares is not None:
            self.number_of_shares = number_of_shares
        if total_shares_value is not None:
            self.total_shares_value = total_shares_value

    @property
    def symbol(self):
        """Gets the symbol of this IPOEvent.  # noqa: E501

        Symbol.  # noqa: E501

        :return: The symbol of this IPOEvent.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this IPOEvent.

        Symbol.  # noqa: E501

        :param symbol: The symbol of this IPOEvent.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def _date(self):
        """Gets the _date of this IPOEvent.  # noqa: E501

        IPO date.  # noqa: E501

        :return: The _date of this IPOEvent.  # noqa: E501
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this IPOEvent.

        IPO date.  # noqa: E501

        :param _date: The _date of this IPOEvent.  # noqa: E501
        :type: date
        """

        self.__date = _date

    @property
    def exchange(self):
        """Gets the exchange of this IPOEvent.  # noqa: E501

        Exchange.  # noqa: E501

        :return: The exchange of this IPOEvent.  # noqa: E501
        :rtype: str
        """
        return self._exchange

    @exchange.setter
    def exchange(self, exchange):
        """Sets the exchange of this IPOEvent.

        Exchange.  # noqa: E501

        :param exchange: The exchange of this IPOEvent.  # noqa: E501
        :type: str
        """

        self._exchange = exchange

    @property
    def name(self):
        """Gets the name of this IPOEvent.  # noqa: E501

        Company's name.  # noqa: E501

        :return: The name of this IPOEvent.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IPOEvent.

        Company's name.  # noqa: E501

        :param name: The name of this IPOEvent.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this IPOEvent.  # noqa: E501

        IPO status. Can take 1 of the following values: <code>expected</code>,<code>priced</code>,<code>withdrawn</code>,<code>filed</code>  # noqa: E501

        :return: The status of this IPOEvent.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this IPOEvent.

        IPO status. Can take 1 of the following values: <code>expected</code>,<code>priced</code>,<code>withdrawn</code>,<code>filed</code>  # noqa: E501

        :param status: The status of this IPOEvent.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def price(self):
        """Gets the price of this IPOEvent.  # noqa: E501

        Projected price or price range.  # noqa: E501

        :return: The price of this IPOEvent.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this IPOEvent.

        Projected price or price range.  # noqa: E501

        :param price: The price of this IPOEvent.  # noqa: E501
        :type: str
        """

        self._price = price

    @property
    def number_of_shares(self):
        """Gets the number_of_shares of this IPOEvent.  # noqa: E501

        Number of shares offered during the IPO.  # noqa: E501

        :return: The number_of_shares of this IPOEvent.  # noqa: E501
        :rtype: float
        """
        return self._number_of_shares

    @number_of_shares.setter
    def number_of_shares(self, number_of_shares):
        """Sets the number_of_shares of this IPOEvent.

        Number of shares offered during the IPO.  # noqa: E501

        :param number_of_shares: The number_of_shares of this IPOEvent.  # noqa: E501
        :type: float
        """

        self._number_of_shares = number_of_shares

    @property
    def total_shares_value(self):
        """Gets the total_shares_value of this IPOEvent.  # noqa: E501

        Total shares value.  # noqa: E501

        :return: The total_shares_value of this IPOEvent.  # noqa: E501
        :rtype: float
        """
        return self._total_shares_value

    @total_shares_value.setter
    def total_shares_value(self, total_shares_value):
        """Sets the total_shares_value of this IPOEvent.

        Total shares value.  # noqa: E501

        :param total_shares_value: The total_shares_value of this IPOEvent.  # noqa: E501
        :type: float
        """

        self._total_shares_value = total_shares_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IPOEvent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IPOEvent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IPOEvent):
            return True

        return self.to_dict() != other.to_dict()
