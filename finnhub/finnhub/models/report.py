# coding: utf-8

"""
    Finnhub API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Report(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_number': 'str',
        'symbol': 'str',
        'cik': 'str',
        'year': 'int',
        'quarter': 'int',
        'form': 'str',
        'start_date': 'str',
        'end_date': 'str',
        'filed_date': 'str',
        'accepted_date': 'str',
        'report': 'ReportDataMap'
    }

    attribute_map = {
        'access_number': 'accessNumber',
        'symbol': 'symbol',
        'cik': 'cik',
        'year': 'year',
        'quarter': 'quarter',
        'form': 'form',
        'start_date': 'startDate',
        'end_date': 'endDate',
        'filed_date': 'filedDate',
        'accepted_date': 'acceptedDate',
        'report': 'report'
    }

    def __init__(self, access_number=None, symbol=None, cik=None, year=None, quarter=None, form=None, start_date=None, end_date=None, filed_date=None, accepted_date=None, report=None, _configuration=None):  # noqa: E501
        """Report - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._access_number = None
        self._symbol = None
        self._cik = None
        self._year = None
        self._quarter = None
        self._form = None
        self._start_date = None
        self._end_date = None
        self._filed_date = None
        self._accepted_date = None
        self._report = None
        self.discriminator = None

        if access_number is not None:
            self.access_number = access_number
        if symbol is not None:
            self.symbol = symbol
        if cik is not None:
            self.cik = cik
        if year is not None:
            self.year = year
        if quarter is not None:
            self.quarter = quarter
        if form is not None:
            self.form = form
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if filed_date is not None:
            self.filed_date = filed_date
        if accepted_date is not None:
            self.accepted_date = accepted_date
        if report is not None:
            self.report = report

    @property
    def access_number(self):
        """Gets the access_number of this Report.  # noqa: E501

        Access number.  # noqa: E501

        :return: The access_number of this Report.  # noqa: E501
        :rtype: str
        """
        return self._access_number

    @access_number.setter
    def access_number(self, access_number):
        """Sets the access_number of this Report.

        Access number.  # noqa: E501

        :param access_number: The access_number of this Report.  # noqa: E501
        :type: str
        """

        self._access_number = access_number

    @property
    def symbol(self):
        """Gets the symbol of this Report.  # noqa: E501

        Symbol.  # noqa: E501

        :return: The symbol of this Report.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this Report.

        Symbol.  # noqa: E501

        :param symbol: The symbol of this Report.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def cik(self):
        """Gets the cik of this Report.  # noqa: E501

        CIK.  # noqa: E501

        :return: The cik of this Report.  # noqa: E501
        :rtype: str
        """
        return self._cik

    @cik.setter
    def cik(self, cik):
        """Sets the cik of this Report.

        CIK.  # noqa: E501

        :param cik: The cik of this Report.  # noqa: E501
        :type: str
        """

        self._cik = cik

    @property
    def year(self):
        """Gets the year of this Report.  # noqa: E501

        Year.  # noqa: E501

        :return: The year of this Report.  # noqa: E501
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this Report.

        Year.  # noqa: E501

        :param year: The year of this Report.  # noqa: E501
        :type: int
        """

        self._year = year

    @property
    def quarter(self):
        """Gets the quarter of this Report.  # noqa: E501

        Quarter.  # noqa: E501

        :return: The quarter of this Report.  # noqa: E501
        :rtype: int
        """
        return self._quarter

    @quarter.setter
    def quarter(self, quarter):
        """Sets the quarter of this Report.

        Quarter.  # noqa: E501

        :param quarter: The quarter of this Report.  # noqa: E501
        :type: int
        """

        self._quarter = quarter

    @property
    def form(self):
        """Gets the form of this Report.  # noqa: E501

        Form type.  # noqa: E501

        :return: The form of this Report.  # noqa: E501
        :rtype: str
        """
        return self._form

    @form.setter
    def form(self, form):
        """Sets the form of this Report.

        Form type.  # noqa: E501

        :param form: The form of this Report.  # noqa: E501
        :type: str
        """

        self._form = form

    @property
    def start_date(self):
        """Gets the start_date of this Report.  # noqa: E501

        Period start date <code>%Y-%m-%d %H:%M:%S</code>.  # noqa: E501

        :return: The start_date of this Report.  # noqa: E501
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this Report.

        Period start date <code>%Y-%m-%d %H:%M:%S</code>.  # noqa: E501

        :param start_date: The start_date of this Report.  # noqa: E501
        :type: str
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this Report.  # noqa: E501

        Period end date <code>%Y-%m-%d %H:%M:%S</code>.  # noqa: E501

        :return: The end_date of this Report.  # noqa: E501
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this Report.

        Period end date <code>%Y-%m-%d %H:%M:%S</code>.  # noqa: E501

        :param end_date: The end_date of this Report.  # noqa: E501
        :type: str
        """

        self._end_date = end_date

    @property
    def filed_date(self):
        """Gets the filed_date of this Report.  # noqa: E501

        Filed date <code>%Y-%m-%d %H:%M:%S</code>.  # noqa: E501

        :return: The filed_date of this Report.  # noqa: E501
        :rtype: str
        """
        return self._filed_date

    @filed_date.setter
    def filed_date(self, filed_date):
        """Sets the filed_date of this Report.

        Filed date <code>%Y-%m-%d %H:%M:%S</code>.  # noqa: E501

        :param filed_date: The filed_date of this Report.  # noqa: E501
        :type: str
        """

        self._filed_date = filed_date

    @property
    def accepted_date(self):
        """Gets the accepted_date of this Report.  # noqa: E501

        Accepted date <code>%Y-%m-%d %H:%M:%S</code>.  # noqa: E501

        :return: The accepted_date of this Report.  # noqa: E501
        :rtype: str
        """
        return self._accepted_date

    @accepted_date.setter
    def accepted_date(self, accepted_date):
        """Sets the accepted_date of this Report.

        Accepted date <code>%Y-%m-%d %H:%M:%S</code>.  # noqa: E501

        :param accepted_date: The accepted_date of this Report.  # noqa: E501
        :type: str
        """

        self._accepted_date = accepted_date

    @property
    def report(self):
        """Gets the report of this Report.  # noqa: E501

        Report data.  # noqa: E501

        :return: The report of this Report.  # noqa: E501
        :rtype: ReportDataMap
        """
        return self._report

    @report.setter
    def report(self, report):
        """Sets the report of this Report.

        Report data.  # noqa: E501

        :param report: The report of this Report.  # noqa: E501
        :type: ReportDataMap
        """

        self._report = report

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Report, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Report):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Report):
            return True

        return self.to_dict() != other.to_dict()
