# coding: utf-8

"""
    Finnhub API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class MutualFundProfileData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'category': 'str',
        'investment_segment': 'str',
        'total_nav': 'float',
        'expense_ratio': 'float',
        'benchmark': 'str',
        'inception_date': 'date',
        'description': 'str',
        'fund_family': 'str',
        'manager': 'str',
        'status': 'str',
        'beta': 'float',
        'deferred_load': 'float',
        'fee12b1': 'float',
        'front_load': 'float',
        'ira_min_investment': 'float',
        'isin': 'str',
        'cusip': 'str',
        'max_redemption_fee': 'float',
        'standard_min_investment': 'float',
        'turnover': 'float'
    }

    attribute_map = {
        'name': 'name',
        'category': 'category',
        'investment_segment': 'investmentSegment',
        'total_nav': 'totalNav',
        'expense_ratio': 'expenseRatio',
        'benchmark': 'benchmark',
        'inception_date': 'inceptionDate',
        'description': 'description',
        'fund_family': 'fundFamily',
        'manager': 'manager',
        'status': 'status',
        'beta': 'beta',
        'deferred_load': 'deferredLoad',
        'fee12b1': 'fee12b1',
        'front_load': 'frontLoad',
        'ira_min_investment': 'iraMinInvestment',
        'isin': 'isin',
        'cusip': 'cusip',
        'max_redemption_fee': 'maxRedemptionFee',
        'standard_min_investment': 'standardMinInvestment',
        'turnover': 'turnover'
    }

    def __init__(self, name=None, category=None, investment_segment=None, total_nav=None, expense_ratio=None, benchmark=None, inception_date=None, description=None, fund_family=None, manager=None, status=None, beta=None, deferred_load=None, fee12b1=None, front_load=None, ira_min_investment=None, isin=None, cusip=None, max_redemption_fee=None, standard_min_investment=None, turnover=None, _configuration=None):  # noqa: E501
        """MutualFundProfileData - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._category = None
        self._investment_segment = None
        self._total_nav = None
        self._expense_ratio = None
        self._benchmark = None
        self._inception_date = None
        self._description = None
        self._fund_family = None
        self._manager = None
        self._status = None
        self._beta = None
        self._deferred_load = None
        self._fee12b1 = None
        self._front_load = None
        self._ira_min_investment = None
        self._isin = None
        self._cusip = None
        self._max_redemption_fee = None
        self._standard_min_investment = None
        self._turnover = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if category is not None:
            self.category = category
        if investment_segment is not None:
            self.investment_segment = investment_segment
        if total_nav is not None:
            self.total_nav = total_nav
        if expense_ratio is not None:
            self.expense_ratio = expense_ratio
        if benchmark is not None:
            self.benchmark = benchmark
        if inception_date is not None:
            self.inception_date = inception_date
        if description is not None:
            self.description = description
        if fund_family is not None:
            self.fund_family = fund_family
        if manager is not None:
            self.manager = manager
        if status is not None:
            self.status = status
        if beta is not None:
            self.beta = beta
        if deferred_load is not None:
            self.deferred_load = deferred_load
        if fee12b1 is not None:
            self.fee12b1 = fee12b1
        if front_load is not None:
            self.front_load = front_load
        if ira_min_investment is not None:
            self.ira_min_investment = ira_min_investment
        if isin is not None:
            self.isin = isin
        if cusip is not None:
            self.cusip = cusip
        if max_redemption_fee is not None:
            self.max_redemption_fee = max_redemption_fee
        if standard_min_investment is not None:
            self.standard_min_investment = standard_min_investment
        if turnover is not None:
            self.turnover = turnover

    @property
    def name(self):
        """Gets the name of this MutualFundProfileData.  # noqa: E501

        Name  # noqa: E501

        :return: The name of this MutualFundProfileData.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MutualFundProfileData.

        Name  # noqa: E501

        :param name: The name of this MutualFundProfileData.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def category(self):
        """Gets the category of this MutualFundProfileData.  # noqa: E501

        Fund's category.  # noqa: E501

        :return: The category of this MutualFundProfileData.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this MutualFundProfileData.

        Fund's category.  # noqa: E501

        :param category: The category of this MutualFundProfileData.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def investment_segment(self):
        """Gets the investment_segment of this MutualFundProfileData.  # noqa: E501

        Investment Segment.  # noqa: E501

        :return: The investment_segment of this MutualFundProfileData.  # noqa: E501
        :rtype: str
        """
        return self._investment_segment

    @investment_segment.setter
    def investment_segment(self, investment_segment):
        """Sets the investment_segment of this MutualFundProfileData.

        Investment Segment.  # noqa: E501

        :param investment_segment: The investment_segment of this MutualFundProfileData.  # noqa: E501
        :type: str
        """

        self._investment_segment = investment_segment

    @property
    def total_nav(self):
        """Gets the total_nav of this MutualFundProfileData.  # noqa: E501

        NAV.  # noqa: E501

        :return: The total_nav of this MutualFundProfileData.  # noqa: E501
        :rtype: float
        """
        return self._total_nav

    @total_nav.setter
    def total_nav(self, total_nav):
        """Sets the total_nav of this MutualFundProfileData.

        NAV.  # noqa: E501

        :param total_nav: The total_nav of this MutualFundProfileData.  # noqa: E501
        :type: float
        """

        self._total_nav = total_nav

    @property
    def expense_ratio(self):
        """Gets the expense_ratio of this MutualFundProfileData.  # noqa: E501

        Expense ratio.  # noqa: E501

        :return: The expense_ratio of this MutualFundProfileData.  # noqa: E501
        :rtype: float
        """
        return self._expense_ratio

    @expense_ratio.setter
    def expense_ratio(self, expense_ratio):
        """Sets the expense_ratio of this MutualFundProfileData.

        Expense ratio.  # noqa: E501

        :param expense_ratio: The expense_ratio of this MutualFundProfileData.  # noqa: E501
        :type: float
        """

        self._expense_ratio = expense_ratio

    @property
    def benchmark(self):
        """Gets the benchmark of this MutualFundProfileData.  # noqa: E501

        Index benchmark.  # noqa: E501

        :return: The benchmark of this MutualFundProfileData.  # noqa: E501
        :rtype: str
        """
        return self._benchmark

    @benchmark.setter
    def benchmark(self, benchmark):
        """Sets the benchmark of this MutualFundProfileData.

        Index benchmark.  # noqa: E501

        :param benchmark: The benchmark of this MutualFundProfileData.  # noqa: E501
        :type: str
        """

        self._benchmark = benchmark

    @property
    def inception_date(self):
        """Gets the inception_date of this MutualFundProfileData.  # noqa: E501

        Inception date.  # noqa: E501

        :return: The inception_date of this MutualFundProfileData.  # noqa: E501
        :rtype: date
        """
        return self._inception_date

    @inception_date.setter
    def inception_date(self, inception_date):
        """Sets the inception_date of this MutualFundProfileData.

        Inception date.  # noqa: E501

        :param inception_date: The inception_date of this MutualFundProfileData.  # noqa: E501
        :type: date
        """

        self._inception_date = inception_date

    @property
    def description(self):
        """Gets the description of this MutualFundProfileData.  # noqa: E501

        Fund's description.  # noqa: E501

        :return: The description of this MutualFundProfileData.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MutualFundProfileData.

        Fund's description.  # noqa: E501

        :param description: The description of this MutualFundProfileData.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def fund_family(self):
        """Gets the fund_family of this MutualFundProfileData.  # noqa: E501

        Fund Family.  # noqa: E501

        :return: The fund_family of this MutualFundProfileData.  # noqa: E501
        :rtype: str
        """
        return self._fund_family

    @fund_family.setter
    def fund_family(self, fund_family):
        """Sets the fund_family of this MutualFundProfileData.

        Fund Family.  # noqa: E501

        :param fund_family: The fund_family of this MutualFundProfileData.  # noqa: E501
        :type: str
        """

        self._fund_family = fund_family

    @property
    def manager(self):
        """Gets the manager of this MutualFundProfileData.  # noqa: E501

        Fund's managers.  # noqa: E501

        :return: The manager of this MutualFundProfileData.  # noqa: E501
        :rtype: str
        """
        return self._manager

    @manager.setter
    def manager(self, manager):
        """Sets the manager of this MutualFundProfileData.

        Fund's managers.  # noqa: E501

        :param manager: The manager of this MutualFundProfileData.  # noqa: E501
        :type: str
        """

        self._manager = manager

    @property
    def status(self):
        """Gets the status of this MutualFundProfileData.  # noqa: E501

        Status.  # noqa: E501

        :return: The status of this MutualFundProfileData.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MutualFundProfileData.

        Status.  # noqa: E501

        :param status: The status of this MutualFundProfileData.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def beta(self):
        """Gets the beta of this MutualFundProfileData.  # noqa: E501

        Beta.  # noqa: E501

        :return: The beta of this MutualFundProfileData.  # noqa: E501
        :rtype: float
        """
        return self._beta

    @beta.setter
    def beta(self, beta):
        """Sets the beta of this MutualFundProfileData.

        Beta.  # noqa: E501

        :param beta: The beta of this MutualFundProfileData.  # noqa: E501
        :type: float
        """

        self._beta = beta

    @property
    def deferred_load(self):
        """Gets the deferred_load of this MutualFundProfileData.  # noqa: E501

        Deferred load.  # noqa: E501

        :return: The deferred_load of this MutualFundProfileData.  # noqa: E501
        :rtype: float
        """
        return self._deferred_load

    @deferred_load.setter
    def deferred_load(self, deferred_load):
        """Sets the deferred_load of this MutualFundProfileData.

        Deferred load.  # noqa: E501

        :param deferred_load: The deferred_load of this MutualFundProfileData.  # noqa: E501
        :type: float
        """

        self._deferred_load = deferred_load

    @property
    def fee12b1(self):
        """Gets the fee12b1 of this MutualFundProfileData.  # noqa: E501

        12B-1 fee.  # noqa: E501

        :return: The fee12b1 of this MutualFundProfileData.  # noqa: E501
        :rtype: float
        """
        return self._fee12b1

    @fee12b1.setter
    def fee12b1(self, fee12b1):
        """Sets the fee12b1 of this MutualFundProfileData.

        12B-1 fee.  # noqa: E501

        :param fee12b1: The fee12b1 of this MutualFundProfileData.  # noqa: E501
        :type: float
        """

        self._fee12b1 = fee12b1

    @property
    def front_load(self):
        """Gets the front_load of this MutualFundProfileData.  # noqa: E501

        Front Load.  # noqa: E501

        :return: The front_load of this MutualFundProfileData.  # noqa: E501
        :rtype: float
        """
        return self._front_load

    @front_load.setter
    def front_load(self, front_load):
        """Sets the front_load of this MutualFundProfileData.

        Front Load.  # noqa: E501

        :param front_load: The front_load of this MutualFundProfileData.  # noqa: E501
        :type: float
        """

        self._front_load = front_load

    @property
    def ira_min_investment(self):
        """Gets the ira_min_investment of this MutualFundProfileData.  # noqa: E501

        IRA minimum investment.  # noqa: E501

        :return: The ira_min_investment of this MutualFundProfileData.  # noqa: E501
        :rtype: float
        """
        return self._ira_min_investment

    @ira_min_investment.setter
    def ira_min_investment(self, ira_min_investment):
        """Sets the ira_min_investment of this MutualFundProfileData.

        IRA minimum investment.  # noqa: E501

        :param ira_min_investment: The ira_min_investment of this MutualFundProfileData.  # noqa: E501
        :type: float
        """

        self._ira_min_investment = ira_min_investment

    @property
    def isin(self):
        """Gets the isin of this MutualFundProfileData.  # noqa: E501

        ISIN.  # noqa: E501

        :return: The isin of this MutualFundProfileData.  # noqa: E501
        :rtype: str
        """
        return self._isin

    @isin.setter
    def isin(self, isin):
        """Sets the isin of this MutualFundProfileData.

        ISIN.  # noqa: E501

        :param isin: The isin of this MutualFundProfileData.  # noqa: E501
        :type: str
        """

        self._isin = isin

    @property
    def cusip(self):
        """Gets the cusip of this MutualFundProfileData.  # noqa: E501

        CUSIP.  # noqa: E501

        :return: The cusip of this MutualFundProfileData.  # noqa: E501
        :rtype: str
        """
        return self._cusip

    @cusip.setter
    def cusip(self, cusip):
        """Sets the cusip of this MutualFundProfileData.

        CUSIP.  # noqa: E501

        :param cusip: The cusip of this MutualFundProfileData.  # noqa: E501
        :type: str
        """

        self._cusip = cusip

    @property
    def max_redemption_fee(self):
        """Gets the max_redemption_fee of this MutualFundProfileData.  # noqa: E501

        Max redemption fee.  # noqa: E501

        :return: The max_redemption_fee of this MutualFundProfileData.  # noqa: E501
        :rtype: float
        """
        return self._max_redemption_fee

    @max_redemption_fee.setter
    def max_redemption_fee(self, max_redemption_fee):
        """Sets the max_redemption_fee of this MutualFundProfileData.

        Max redemption fee.  # noqa: E501

        :param max_redemption_fee: The max_redemption_fee of this MutualFundProfileData.  # noqa: E501
        :type: float
        """

        self._max_redemption_fee = max_redemption_fee

    @property
    def standard_min_investment(self):
        """Gets the standard_min_investment of this MutualFundProfileData.  # noqa: E501

        Minimum investment for standard accounts.  # noqa: E501

        :return: The standard_min_investment of this MutualFundProfileData.  # noqa: E501
        :rtype: float
        """
        return self._standard_min_investment

    @standard_min_investment.setter
    def standard_min_investment(self, standard_min_investment):
        """Sets the standard_min_investment of this MutualFundProfileData.

        Minimum investment for standard accounts.  # noqa: E501

        :param standard_min_investment: The standard_min_investment of this MutualFundProfileData.  # noqa: E501
        :type: float
        """

        self._standard_min_investment = standard_min_investment

    @property
    def turnover(self):
        """Gets the turnover of this MutualFundProfileData.  # noqa: E501

        Turnover.  # noqa: E501

        :return: The turnover of this MutualFundProfileData.  # noqa: E501
        :rtype: float
        """
        return self._turnover

    @turnover.setter
    def turnover(self, turnover):
        """Sets the turnover of this MutualFundProfileData.

        Turnover.  # noqa: E501

        :param turnover: The turnover of this MutualFundProfileData.  # noqa: E501
        :type: float
        """

        self._turnover = turnover

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MutualFundProfileData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MutualFundProfileData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MutualFundProfileData):
            return True

        return self.to_dict() != other.to_dict()
