# coding: utf-8

"""
    Finnhub API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ETFHoldingsData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'symbol': 'str',
        'name': 'str',
        'isin': 'str',
        'cusip': 'str',
        'share': 'float',
        'percent': 'float',
        'value': 'float'
    }

    attribute_map = {
        'symbol': 'symbol',
        'name': 'name',
        'isin': 'isin',
        'cusip': 'cusip',
        'share': 'share',
        'percent': 'percent',
        'value': 'value'
    }

    def __init__(self, symbol=None, name=None, isin=None, cusip=None, share=None, percent=None, value=None, _configuration=None):  # noqa: E501
        """ETFHoldingsData - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._symbol = None
        self._name = None
        self._isin = None
        self._cusip = None
        self._share = None
        self._percent = None
        self._value = None
        self.discriminator = None

        if symbol is not None:
            self.symbol = symbol
        if name is not None:
            self.name = name
        if isin is not None:
            self.isin = isin
        if cusip is not None:
            self.cusip = cusip
        if share is not None:
            self.share = share
        if percent is not None:
            self.percent = percent
        if value is not None:
            self.value = value

    @property
    def symbol(self):
        """Gets the symbol of this ETFHoldingsData.  # noqa: E501

        Symbol description  # noqa: E501

        :return: The symbol of this ETFHoldingsData.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this ETFHoldingsData.

        Symbol description  # noqa: E501

        :param symbol: The symbol of this ETFHoldingsData.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def name(self):
        """Gets the name of this ETFHoldingsData.  # noqa: E501

        Security name  # noqa: E501

        :return: The name of this ETFHoldingsData.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ETFHoldingsData.

        Security name  # noqa: E501

        :param name: The name of this ETFHoldingsData.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def isin(self):
        """Gets the isin of this ETFHoldingsData.  # noqa: E501

        ISIN.  # noqa: E501

        :return: The isin of this ETFHoldingsData.  # noqa: E501
        :rtype: str
        """
        return self._isin

    @isin.setter
    def isin(self, isin):
        """Sets the isin of this ETFHoldingsData.

        ISIN.  # noqa: E501

        :param isin: The isin of this ETFHoldingsData.  # noqa: E501
        :type: str
        """

        self._isin = isin

    @property
    def cusip(self):
        """Gets the cusip of this ETFHoldingsData.  # noqa: E501

        CUSIP.  # noqa: E501

        :return: The cusip of this ETFHoldingsData.  # noqa: E501
        :rtype: str
        """
        return self._cusip

    @cusip.setter
    def cusip(self, cusip):
        """Sets the cusip of this ETFHoldingsData.

        CUSIP.  # noqa: E501

        :param cusip: The cusip of this ETFHoldingsData.  # noqa: E501
        :type: str
        """

        self._cusip = cusip

    @property
    def share(self):
        """Gets the share of this ETFHoldingsData.  # noqa: E501

        Number of shares owned by the ETF.  # noqa: E501

        :return: The share of this ETFHoldingsData.  # noqa: E501
        :rtype: float
        """
        return self._share

    @share.setter
    def share(self, share):
        """Sets the share of this ETFHoldingsData.

        Number of shares owned by the ETF.  # noqa: E501

        :param share: The share of this ETFHoldingsData.  # noqa: E501
        :type: float
        """

        self._share = share

    @property
    def percent(self):
        """Gets the percent of this ETFHoldingsData.  # noqa: E501

        Portfolio's percent  # noqa: E501

        :return: The percent of this ETFHoldingsData.  # noqa: E501
        :rtype: float
        """
        return self._percent

    @percent.setter
    def percent(self, percent):
        """Sets the percent of this ETFHoldingsData.

        Portfolio's percent  # noqa: E501

        :param percent: The percent of this ETFHoldingsData.  # noqa: E501
        :type: float
        """

        self._percent = percent

    @property
    def value(self):
        """Gets the value of this ETFHoldingsData.  # noqa: E501

        Market value  # noqa: E501

        :return: The value of this ETFHoldingsData.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ETFHoldingsData.

        Market value  # noqa: E501

        :param value: The value of this ETFHoldingsData.  # noqa: E501
        :type: float
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ETFHoldingsData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ETFHoldingsData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ETFHoldingsData):
            return True

        return self.to_dict() != other.to_dict()
