# coding: utf-8

"""
    Finnhub API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class FDAComitteeMeeting(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'from_date': 'str',
        'to_date': 'str',
        'event_description': 'str',
        'url': 'str'
    }

    attribute_map = {
        'from_date': 'fromDate',
        'to_date': 'toDate',
        'event_description': 'eventDescription',
        'url': 'url'
    }

    def __init__(self, from_date=None, to_date=None, event_description=None, url=None, _configuration=None):  # noqa: E501
        """FDAComitteeMeeting - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._from_date = None
        self._to_date = None
        self._event_description = None
        self._url = None
        self.discriminator = None

        if from_date is not None:
            self.from_date = from_date
        if to_date is not None:
            self.to_date = to_date
        if event_description is not None:
            self.event_description = event_description
        if url is not None:
            self.url = url

    @property
    def from_date(self):
        """Gets the from_date of this FDAComitteeMeeting.  # noqa: E501

        Start time of the event in EST.  # noqa: E501

        :return: The from_date of this FDAComitteeMeeting.  # noqa: E501
        :rtype: str
        """
        return self._from_date

    @from_date.setter
    def from_date(self, from_date):
        """Sets the from_date of this FDAComitteeMeeting.

        Start time of the event in EST.  # noqa: E501

        :param from_date: The from_date of this FDAComitteeMeeting.  # noqa: E501
        :type: str
        """

        self._from_date = from_date

    @property
    def to_date(self):
        """Gets the to_date of this FDAComitteeMeeting.  # noqa: E501

        End time of the event in EST.  # noqa: E501

        :return: The to_date of this FDAComitteeMeeting.  # noqa: E501
        :rtype: str
        """
        return self._to_date

    @to_date.setter
    def to_date(self, to_date):
        """Sets the to_date of this FDAComitteeMeeting.

        End time of the event in EST.  # noqa: E501

        :param to_date: The to_date of this FDAComitteeMeeting.  # noqa: E501
        :type: str
        """

        self._to_date = to_date

    @property
    def event_description(self):
        """Gets the event_description of this FDAComitteeMeeting.  # noqa: E501

        Event's description.  # noqa: E501

        :return: The event_description of this FDAComitteeMeeting.  # noqa: E501
        :rtype: str
        """
        return self._event_description

    @event_description.setter
    def event_description(self, event_description):
        """Sets the event_description of this FDAComitteeMeeting.

        Event's description.  # noqa: E501

        :param event_description: The event_description of this FDAComitteeMeeting.  # noqa: E501
        :type: str
        """

        self._event_description = event_description

    @property
    def url(self):
        """Gets the url of this FDAComitteeMeeting.  # noqa: E501

        URL.  # noqa: E501

        :return: The url of this FDAComitteeMeeting.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this FDAComitteeMeeting.

        URL.  # noqa: E501

        :param url: The url of this FDAComitteeMeeting.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FDAComitteeMeeting, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FDAComitteeMeeting):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FDAComitteeMeeting):
            return True

        return self.to_dict() != other.to_dict()
