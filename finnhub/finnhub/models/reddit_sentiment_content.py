# coding: utf-8

"""
    Finnhub API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class RedditSentimentContent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mention': 'int',
        'positive_mention': 'int',
        'negative_mention': 'int',
        'positive_score': 'float',
        'negative_score': 'float',
        'score': 'float',
        'at_time': 'str'
    }

    attribute_map = {
        'mention': 'mention',
        'positive_mention': 'positiveMention',
        'negative_mention': 'negativeMention',
        'positive_score': 'positiveScore',
        'negative_score': 'negativeScore',
        'score': 'score',
        'at_time': 'atTime'
    }

    def __init__(self, mention=None, positive_mention=None, negative_mention=None, positive_score=None, negative_score=None, score=None, at_time=None, _configuration=None):  # noqa: E501
        """RedditSentimentContent - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._mention = None
        self._positive_mention = None
        self._negative_mention = None
        self._positive_score = None
        self._negative_score = None
        self._score = None
        self._at_time = None
        self.discriminator = None

        if mention is not None:
            self.mention = mention
        if positive_mention is not None:
            self.positive_mention = positive_mention
        if negative_mention is not None:
            self.negative_mention = negative_mention
        if positive_score is not None:
            self.positive_score = positive_score
        if negative_score is not None:
            self.negative_score = negative_score
        if score is not None:
            self.score = score
        if at_time is not None:
            self.at_time = at_time

    @property
    def mention(self):
        """Gets the mention of this RedditSentimentContent.  # noqa: E501

        Number of mentions  # noqa: E501

        :return: The mention of this RedditSentimentContent.  # noqa: E501
        :rtype: int
        """
        return self._mention

    @mention.setter
    def mention(self, mention):
        """Sets the mention of this RedditSentimentContent.

        Number of mentions  # noqa: E501

        :param mention: The mention of this RedditSentimentContent.  # noqa: E501
        :type: int
        """

        self._mention = mention

    @property
    def positive_mention(self):
        """Gets the positive_mention of this RedditSentimentContent.  # noqa: E501

        Number of positive mentions  # noqa: E501

        :return: The positive_mention of this RedditSentimentContent.  # noqa: E501
        :rtype: int
        """
        return self._positive_mention

    @positive_mention.setter
    def positive_mention(self, positive_mention):
        """Sets the positive_mention of this RedditSentimentContent.

        Number of positive mentions  # noqa: E501

        :param positive_mention: The positive_mention of this RedditSentimentContent.  # noqa: E501
        :type: int
        """

        self._positive_mention = positive_mention

    @property
    def negative_mention(self):
        """Gets the negative_mention of this RedditSentimentContent.  # noqa: E501

        Number of negative mentions  # noqa: E501

        :return: The negative_mention of this RedditSentimentContent.  # noqa: E501
        :rtype: int
        """
        return self._negative_mention

    @negative_mention.setter
    def negative_mention(self, negative_mention):
        """Sets the negative_mention of this RedditSentimentContent.

        Number of negative mentions  # noqa: E501

        :param negative_mention: The negative_mention of this RedditSentimentContent.  # noqa: E501
        :type: int
        """

        self._negative_mention = negative_mention

    @property
    def positive_score(self):
        """Gets the positive_score of this RedditSentimentContent.  # noqa: E501

        Positive score. Range 0-1  # noqa: E501

        :return: The positive_score of this RedditSentimentContent.  # noqa: E501
        :rtype: float
        """
        return self._positive_score

    @positive_score.setter
    def positive_score(self, positive_score):
        """Sets the positive_score of this RedditSentimentContent.

        Positive score. Range 0-1  # noqa: E501

        :param positive_score: The positive_score of this RedditSentimentContent.  # noqa: E501
        :type: float
        """

        self._positive_score = positive_score

    @property
    def negative_score(self):
        """Gets the negative_score of this RedditSentimentContent.  # noqa: E501

        Negative score. Range 0-1  # noqa: E501

        :return: The negative_score of this RedditSentimentContent.  # noqa: E501
        :rtype: float
        """
        return self._negative_score

    @negative_score.setter
    def negative_score(self, negative_score):
        """Sets the negative_score of this RedditSentimentContent.

        Negative score. Range 0-1  # noqa: E501

        :param negative_score: The negative_score of this RedditSentimentContent.  # noqa: E501
        :type: float
        """

        self._negative_score = negative_score

    @property
    def score(self):
        """Gets the score of this RedditSentimentContent.  # noqa: E501

        Final score. Range: -1 to 1 with 1 is very positive and -1 is very negative  # noqa: E501

        :return: The score of this RedditSentimentContent.  # noqa: E501
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this RedditSentimentContent.

        Final score. Range: -1 to 1 with 1 is very positive and -1 is very negative  # noqa: E501

        :param score: The score of this RedditSentimentContent.  # noqa: E501
        :type: float
        """

        self._score = score

    @property
    def at_time(self):
        """Gets the at_time of this RedditSentimentContent.  # noqa: E501

        Period.  # noqa: E501

        :return: The at_time of this RedditSentimentContent.  # noqa: E501
        :rtype: str
        """
        return self._at_time

    @at_time.setter
    def at_time(self, at_time):
        """Sets the at_time of this RedditSentimentContent.

        Period.  # noqa: E501

        :param at_time: The at_time of this RedditSentimentContent.  # noqa: E501
        :type: str
        """

        self._at_time = at_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RedditSentimentContent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RedditSentimentContent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RedditSentimentContent):
            return True

        return self.to_dict() != other.to_dict()
