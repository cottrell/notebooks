# coding: utf-8

"""
    Finnhub API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class InternationalFiling(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'symbol': 'str',
        'company_name': 'str',
        'filed_date': 'str',
        'category': 'str',
        'title': 'str',
        'description': 'str',
        'url': 'str',
        'language': 'str',
        'country': 'str'
    }

    attribute_map = {
        'symbol': 'symbol',
        'company_name': 'companyName',
        'filed_date': 'filedDate',
        'category': 'category',
        'title': 'title',
        'description': 'description',
        'url': 'url',
        'language': 'language',
        'country': 'country'
    }

    def __init__(self, symbol=None, company_name=None, filed_date=None, category=None, title=None, description=None, url=None, language=None, country=None, _configuration=None):  # noqa: E501
        """InternationalFiling - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._symbol = None
        self._company_name = None
        self._filed_date = None
        self._category = None
        self._title = None
        self._description = None
        self._url = None
        self._language = None
        self._country = None
        self.discriminator = None

        if symbol is not None:
            self.symbol = symbol
        if company_name is not None:
            self.company_name = company_name
        if filed_date is not None:
            self.filed_date = filed_date
        if category is not None:
            self.category = category
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if url is not None:
            self.url = url
        if language is not None:
            self.language = language
        if country is not None:
            self.country = country

    @property
    def symbol(self):
        """Gets the symbol of this InternationalFiling.  # noqa: E501

        Symbol.  # noqa: E501

        :return: The symbol of this InternationalFiling.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this InternationalFiling.

        Symbol.  # noqa: E501

        :param symbol: The symbol of this InternationalFiling.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def company_name(self):
        """Gets the company_name of this InternationalFiling.  # noqa: E501

        Company name.  # noqa: E501

        :return: The company_name of this InternationalFiling.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this InternationalFiling.

        Company name.  # noqa: E501

        :param company_name: The company_name of this InternationalFiling.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def filed_date(self):
        """Gets the filed_date of this InternationalFiling.  # noqa: E501

        Filed date <code>%Y-%m-%d %H:%M:%S</code>.  # noqa: E501

        :return: The filed_date of this InternationalFiling.  # noqa: E501
        :rtype: str
        """
        return self._filed_date

    @filed_date.setter
    def filed_date(self, filed_date):
        """Sets the filed_date of this InternationalFiling.

        Filed date <code>%Y-%m-%d %H:%M:%S</code>.  # noqa: E501

        :param filed_date: The filed_date of this InternationalFiling.  # noqa: E501
        :type: str
        """

        self._filed_date = filed_date

    @property
    def category(self):
        """Gets the category of this InternationalFiling.  # noqa: E501

        Category.  # noqa: E501

        :return: The category of this InternationalFiling.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this InternationalFiling.

        Category.  # noqa: E501

        :param category: The category of this InternationalFiling.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def title(self):
        """Gets the title of this InternationalFiling.  # noqa: E501

        Document's title.  # noqa: E501

        :return: The title of this InternationalFiling.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this InternationalFiling.

        Document's title.  # noqa: E501

        :param title: The title of this InternationalFiling.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this InternationalFiling.  # noqa: E501

        Document's description.  # noqa: E501

        :return: The description of this InternationalFiling.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InternationalFiling.

        Document's description.  # noqa: E501

        :param description: The description of this InternationalFiling.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def url(self):
        """Gets the url of this InternationalFiling.  # noqa: E501

        Url.  # noqa: E501

        :return: The url of this InternationalFiling.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this InternationalFiling.

        Url.  # noqa: E501

        :param url: The url of this InternationalFiling.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def language(self):
        """Gets the language of this InternationalFiling.  # noqa: E501

        Language.  # noqa: E501

        :return: The language of this InternationalFiling.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this InternationalFiling.

        Language.  # noqa: E501

        :param language: The language of this InternationalFiling.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def country(self):
        """Gets the country of this InternationalFiling.  # noqa: E501

        Country.  # noqa: E501

        :return: The country of this InternationalFiling.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this InternationalFiling.

        Country.  # noqa: E501

        :param country: The country of this InternationalFiling.  # noqa: E501
        :type: str
        """

        self._country = country

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InternationalFiling, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InternationalFiling):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InternationalFiling):
            return True

        return self.to_dict() != other.to_dict()
