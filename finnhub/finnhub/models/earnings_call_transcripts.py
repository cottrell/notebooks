# coding: utf-8

"""
    Finnhub API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EarningsCallTranscripts(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'symbol': 'str',
        'transcript': 'list[TranscriptContent]',
        'participant': 'list[TranscriptParticipant]',
        'audio': 'str',
        'id': 'str',
        'title': 'str',
        'time': 'str',
        'year': 'int',
        'quarter': 'int'
    }

    attribute_map = {
        'symbol': 'symbol',
        'transcript': 'transcript',
        'participant': 'participant',
        'audio': 'audio',
        'id': 'id',
        'title': 'title',
        'time': 'time',
        'year': 'year',
        'quarter': 'quarter'
    }

    def __init__(self, symbol=None, transcript=None, participant=None, audio=None, id=None, title=None, time=None, year=None, quarter=None, _configuration=None):  # noqa: E501
        """EarningsCallTranscripts - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._symbol = None
        self._transcript = None
        self._participant = None
        self._audio = None
        self._id = None
        self._title = None
        self._time = None
        self._year = None
        self._quarter = None
        self.discriminator = None

        if symbol is not None:
            self.symbol = symbol
        if transcript is not None:
            self.transcript = transcript
        if participant is not None:
            self.participant = participant
        if audio is not None:
            self.audio = audio
        if id is not None:
            self.id = id
        if title is not None:
            self.title = title
        if time is not None:
            self.time = time
        if year is not None:
            self.year = year
        if quarter is not None:
            self.quarter = quarter

    @property
    def symbol(self):
        """Gets the symbol of this EarningsCallTranscripts.  # noqa: E501

        Company symbol.  # noqa: E501

        :return: The symbol of this EarningsCallTranscripts.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this EarningsCallTranscripts.

        Company symbol.  # noqa: E501

        :param symbol: The symbol of this EarningsCallTranscripts.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def transcript(self):
        """Gets the transcript of this EarningsCallTranscripts.  # noqa: E501

        Transcript content.  # noqa: E501

        :return: The transcript of this EarningsCallTranscripts.  # noqa: E501
        :rtype: list[TranscriptContent]
        """
        return self._transcript

    @transcript.setter
    def transcript(self, transcript):
        """Sets the transcript of this EarningsCallTranscripts.

        Transcript content.  # noqa: E501

        :param transcript: The transcript of this EarningsCallTranscripts.  # noqa: E501
        :type: list[TranscriptContent]
        """

        self._transcript = transcript

    @property
    def participant(self):
        """Gets the participant of this EarningsCallTranscripts.  # noqa: E501

        Participant list  # noqa: E501

        :return: The participant of this EarningsCallTranscripts.  # noqa: E501
        :rtype: list[TranscriptParticipant]
        """
        return self._participant

    @participant.setter
    def participant(self, participant):
        """Sets the participant of this EarningsCallTranscripts.

        Participant list  # noqa: E501

        :param participant: The participant of this EarningsCallTranscripts.  # noqa: E501
        :type: list[TranscriptParticipant]
        """

        self._participant = participant

    @property
    def audio(self):
        """Gets the audio of this EarningsCallTranscripts.  # noqa: E501

        Audio link.  # noqa: E501

        :return: The audio of this EarningsCallTranscripts.  # noqa: E501
        :rtype: str
        """
        return self._audio

    @audio.setter
    def audio(self, audio):
        """Sets the audio of this EarningsCallTranscripts.

        Audio link.  # noqa: E501

        :param audio: The audio of this EarningsCallTranscripts.  # noqa: E501
        :type: str
        """

        self._audio = audio

    @property
    def id(self):
        """Gets the id of this EarningsCallTranscripts.  # noqa: E501

        Transcript's ID.  # noqa: E501

        :return: The id of this EarningsCallTranscripts.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EarningsCallTranscripts.

        Transcript's ID.  # noqa: E501

        :param id: The id of this EarningsCallTranscripts.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this EarningsCallTranscripts.  # noqa: E501

        Title.  # noqa: E501

        :return: The title of this EarningsCallTranscripts.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this EarningsCallTranscripts.

        Title.  # noqa: E501

        :param title: The title of this EarningsCallTranscripts.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def time(self):
        """Gets the time of this EarningsCallTranscripts.  # noqa: E501

        Time of the event.  # noqa: E501

        :return: The time of this EarningsCallTranscripts.  # noqa: E501
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this EarningsCallTranscripts.

        Time of the event.  # noqa: E501

        :param time: The time of this EarningsCallTranscripts.  # noqa: E501
        :type: str
        """

        self._time = time

    @property
    def year(self):
        """Gets the year of this EarningsCallTranscripts.  # noqa: E501

        Year of earnings result in the case of earnings call transcript.  # noqa: E501

        :return: The year of this EarningsCallTranscripts.  # noqa: E501
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this EarningsCallTranscripts.

        Year of earnings result in the case of earnings call transcript.  # noqa: E501

        :param year: The year of this EarningsCallTranscripts.  # noqa: E501
        :type: int
        """

        self._year = year

    @property
    def quarter(self):
        """Gets the quarter of this EarningsCallTranscripts.  # noqa: E501

        Quarter of earnings result in the case of earnings call transcript.  # noqa: E501

        :return: The quarter of this EarningsCallTranscripts.  # noqa: E501
        :rtype: int
        """
        return self._quarter

    @quarter.setter
    def quarter(self, quarter):
        """Sets the quarter of this EarningsCallTranscripts.

        Quarter of earnings result in the case of earnings call transcript.  # noqa: E501

        :param quarter: The quarter of this EarningsCallTranscripts.  # noqa: E501
        :type: int
        """

        self._quarter = quarter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EarningsCallTranscripts, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EarningsCallTranscripts):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EarningsCallTranscripts):
            return True

        return self.to_dict() != other.to_dict()
