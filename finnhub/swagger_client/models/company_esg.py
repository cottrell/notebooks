# coding: utf-8

"""
    Finnhub API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class CompanyESG(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'symbol': 'str',
        'total_esg_score': 'float',
        'environment_score': 'float',
        'governance_score': 'float',
        'social_score': 'float',
        'data': 'CompanyESGMap'
    }

    attribute_map = {
        'symbol': 'symbol',
        'total_esg_score': 'totalESGScore',
        'environment_score': 'environmentScore',
        'governance_score': 'governanceScore',
        'social_score': 'socialScore',
        'data': 'data'
    }

    def __init__(self, symbol=None, total_esg_score=None, environment_score=None, governance_score=None, social_score=None, data=None, _configuration=None):  # noqa: E501
        """CompanyESG - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._symbol = None
        self._total_esg_score = None
        self._environment_score = None
        self._governance_score = None
        self._social_score = None
        self._data = None
        self.discriminator = None

        if symbol is not None:
            self.symbol = symbol
        if total_esg_score is not None:
            self.total_esg_score = total_esg_score
        if environment_score is not None:
            self.environment_score = environment_score
        if governance_score is not None:
            self.governance_score = governance_score
        if social_score is not None:
            self.social_score = social_score
        if data is not None:
            self.data = data

    @property
    def symbol(self):
        """Gets the symbol of this CompanyESG.  # noqa: E501

        symbol  # noqa: E501

        :return: The symbol of this CompanyESG.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this CompanyESG.

        symbol  # noqa: E501

        :param symbol: The symbol of this CompanyESG.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def total_esg_score(self):
        """Gets the total_esg_score of this CompanyESG.  # noqa: E501

        Total ESG Score  # noqa: E501

        :return: The total_esg_score of this CompanyESG.  # noqa: E501
        :rtype: float
        """
        return self._total_esg_score

    @total_esg_score.setter
    def total_esg_score(self, total_esg_score):
        """Sets the total_esg_score of this CompanyESG.

        Total ESG Score  # noqa: E501

        :param total_esg_score: The total_esg_score of this CompanyESG.  # noqa: E501
        :type: float
        """

        self._total_esg_score = total_esg_score

    @property
    def environment_score(self):
        """Gets the environment_score of this CompanyESG.  # noqa: E501

        Environment Score  # noqa: E501

        :return: The environment_score of this CompanyESG.  # noqa: E501
        :rtype: float
        """
        return self._environment_score

    @environment_score.setter
    def environment_score(self, environment_score):
        """Sets the environment_score of this CompanyESG.

        Environment Score  # noqa: E501

        :param environment_score: The environment_score of this CompanyESG.  # noqa: E501
        :type: float
        """

        self._environment_score = environment_score

    @property
    def governance_score(self):
        """Gets the governance_score of this CompanyESG.  # noqa: E501

        Governance Score  # noqa: E501

        :return: The governance_score of this CompanyESG.  # noqa: E501
        :rtype: float
        """
        return self._governance_score

    @governance_score.setter
    def governance_score(self, governance_score):
        """Sets the governance_score of this CompanyESG.

        Governance Score  # noqa: E501

        :param governance_score: The governance_score of this CompanyESG.  # noqa: E501
        :type: float
        """

        self._governance_score = governance_score

    @property
    def social_score(self):
        """Gets the social_score of this CompanyESG.  # noqa: E501

        Social Score  # noqa: E501

        :return: The social_score of this CompanyESG.  # noqa: E501
        :rtype: float
        """
        return self._social_score

    @social_score.setter
    def social_score(self, social_score):
        """Sets the social_score of this CompanyESG.

        Social Score  # noqa: E501

        :param social_score: The social_score of this CompanyESG.  # noqa: E501
        :type: float
        """

        self._social_score = social_score

    @property
    def data(self):
        """Gets the data of this CompanyESG.  # noqa: E501

        Map key-value pair of key ESG data points.  # noqa: E501

        :return: The data of this CompanyESG.  # noqa: E501
        :rtype: CompanyESGMap
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this CompanyESG.

        Map key-value pair of key ESG data points.  # noqa: E501

        :param data: The data of this CompanyESG.  # noqa: E501
        :type: CompanyESGMap
        """

        self._data = data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CompanyESG, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompanyESG):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CompanyESG):
            return True

        return self.to_dict() != other.to_dict()
