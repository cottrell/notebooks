# coding: utf-8

"""
    Finnhub API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class FilingSentiment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'negative': 'float',
        'positive': 'float',
        'polarity': 'float',
        'litigious': 'float',
        'uncertainty': 'float',
        'constraining': 'float',
        'modal_weak': 'float',
        'modal_strong': 'float',
        'modal_moderate': 'float'
    }

    attribute_map = {
        'negative': 'negative',
        'positive': 'positive',
        'polarity': 'polarity',
        'litigious': 'litigious',
        'uncertainty': 'uncertainty',
        'constraining': 'constraining',
        'modal_weak': 'modal-weak',
        'modal_strong': 'modal-strong',
        'modal_moderate': 'modal-moderate'
    }

    def __init__(self, negative=None, positive=None, polarity=None, litigious=None, uncertainty=None, constraining=None, modal_weak=None, modal_strong=None, modal_moderate=None, _configuration=None):  # noqa: E501
        """FilingSentiment - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._negative = None
        self._positive = None
        self._polarity = None
        self._litigious = None
        self._uncertainty = None
        self._constraining = None
        self._modal_weak = None
        self._modal_strong = None
        self._modal_moderate = None
        self.discriminator = None

        if negative is not None:
            self.negative = negative
        if positive is not None:
            self.positive = positive
        if polarity is not None:
            self.polarity = polarity
        if litigious is not None:
            self.litigious = litigious
        if uncertainty is not None:
            self.uncertainty = uncertainty
        if constraining is not None:
            self.constraining = constraining
        if modal_weak is not None:
            self.modal_weak = modal_weak
        if modal_strong is not None:
            self.modal_strong = modal_strong
        if modal_moderate is not None:
            self.modal_moderate = modal_moderate

    @property
    def negative(self):
        """Gets the negative of this FilingSentiment.  # noqa: E501

        % of negative words in the filing.  # noqa: E501

        :return: The negative of this FilingSentiment.  # noqa: E501
        :rtype: float
        """
        return self._negative

    @negative.setter
    def negative(self, negative):
        """Sets the negative of this FilingSentiment.

        % of negative words in the filing.  # noqa: E501

        :param negative: The negative of this FilingSentiment.  # noqa: E501
        :type: float
        """

        self._negative = negative

    @property
    def positive(self):
        """Gets the positive of this FilingSentiment.  # noqa: E501

        % of positive words in the filing.  # noqa: E501

        :return: The positive of this FilingSentiment.  # noqa: E501
        :rtype: float
        """
        return self._positive

    @positive.setter
    def positive(self, positive):
        """Sets the positive of this FilingSentiment.

        % of positive words in the filing.  # noqa: E501

        :param positive: The positive of this FilingSentiment.  # noqa: E501
        :type: float
        """

        self._positive = positive

    @property
    def polarity(self):
        """Gets the polarity of this FilingSentiment.  # noqa: E501

        % of polarity words in the filing.  # noqa: E501

        :return: The polarity of this FilingSentiment.  # noqa: E501
        :rtype: float
        """
        return self._polarity

    @polarity.setter
    def polarity(self, polarity):
        """Sets the polarity of this FilingSentiment.

        % of polarity words in the filing.  # noqa: E501

        :param polarity: The polarity of this FilingSentiment.  # noqa: E501
        :type: float
        """

        self._polarity = polarity

    @property
    def litigious(self):
        """Gets the litigious of this FilingSentiment.  # noqa: E501

        % of litigious words in the filing.  # noqa: E501

        :return: The litigious of this FilingSentiment.  # noqa: E501
        :rtype: float
        """
        return self._litigious

    @litigious.setter
    def litigious(self, litigious):
        """Sets the litigious of this FilingSentiment.

        % of litigious words in the filing.  # noqa: E501

        :param litigious: The litigious of this FilingSentiment.  # noqa: E501
        :type: float
        """

        self._litigious = litigious

    @property
    def uncertainty(self):
        """Gets the uncertainty of this FilingSentiment.  # noqa: E501

        % of uncertainty words in the filing.  # noqa: E501

        :return: The uncertainty of this FilingSentiment.  # noqa: E501
        :rtype: float
        """
        return self._uncertainty

    @uncertainty.setter
    def uncertainty(self, uncertainty):
        """Sets the uncertainty of this FilingSentiment.

        % of uncertainty words in the filing.  # noqa: E501

        :param uncertainty: The uncertainty of this FilingSentiment.  # noqa: E501
        :type: float
        """

        self._uncertainty = uncertainty

    @property
    def constraining(self):
        """Gets the constraining of this FilingSentiment.  # noqa: E501

        % of constraining words in the filing.  # noqa: E501

        :return: The constraining of this FilingSentiment.  # noqa: E501
        :rtype: float
        """
        return self._constraining

    @constraining.setter
    def constraining(self, constraining):
        """Sets the constraining of this FilingSentiment.

        % of constraining words in the filing.  # noqa: E501

        :param constraining: The constraining of this FilingSentiment.  # noqa: E501
        :type: float
        """

        self._constraining = constraining

    @property
    def modal_weak(self):
        """Gets the modal_weak of this FilingSentiment.  # noqa: E501

        % of modal-weak words in the filing.  # noqa: E501

        :return: The modal_weak of this FilingSentiment.  # noqa: E501
        :rtype: float
        """
        return self._modal_weak

    @modal_weak.setter
    def modal_weak(self, modal_weak):
        """Sets the modal_weak of this FilingSentiment.

        % of modal-weak words in the filing.  # noqa: E501

        :param modal_weak: The modal_weak of this FilingSentiment.  # noqa: E501
        :type: float
        """

        self._modal_weak = modal_weak

    @property
    def modal_strong(self):
        """Gets the modal_strong of this FilingSentiment.  # noqa: E501

        % of modal-strong words in the filing.  # noqa: E501

        :return: The modal_strong of this FilingSentiment.  # noqa: E501
        :rtype: float
        """
        return self._modal_strong

    @modal_strong.setter
    def modal_strong(self, modal_strong):
        """Sets the modal_strong of this FilingSentiment.

        % of modal-strong words in the filing.  # noqa: E501

        :param modal_strong: The modal_strong of this FilingSentiment.  # noqa: E501
        :type: float
        """

        self._modal_strong = modal_strong

    @property
    def modal_moderate(self):
        """Gets the modal_moderate of this FilingSentiment.  # noqa: E501

        % of modal-moderate words in the filing.  # noqa: E501

        :return: The modal_moderate of this FilingSentiment.  # noqa: E501
        :rtype: float
        """
        return self._modal_moderate

    @modal_moderate.setter
    def modal_moderate(self, modal_moderate):
        """Sets the modal_moderate of this FilingSentiment.

        % of modal-moderate words in the filing.  # noqa: E501

        :param modal_moderate: The modal_moderate of this FilingSentiment.  # noqa: E501
        :type: float
        """

        self._modal_moderate = modal_moderate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FilingSentiment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FilingSentiment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FilingSentiment):
            return True

        return self.to_dict() != other.to_dict()
