# coding: utf-8

"""
    Finnhub API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from finnhub_swagger_api.configuration import Configuration


class CovidInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'state': 'str',
        'case': 'float',
        'death': 'float',
        'updated': 'str'
    }

    attribute_map = {
        'state': 'state',
        'case': 'case',
        'death': 'death',
        'updated': 'updated'
    }

    def __init__(self, state=None, case=None, death=None, updated=None, _configuration=None):  # noqa: E501
        """CovidInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._state = None
        self._case = None
        self._death = None
        self._updated = None
        self.discriminator = None

        if state is not None:
            self.state = state
        if case is not None:
            self.case = case
        if death is not None:
            self.death = death
        if updated is not None:
            self.updated = updated

    @property
    def state(self):
        """Gets the state of this CovidInfo.  # noqa: E501

        State.  # noqa: E501

        :return: The state of this CovidInfo.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CovidInfo.

        State.  # noqa: E501

        :param state: The state of this CovidInfo.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def case(self):
        """Gets the case of this CovidInfo.  # noqa: E501

        Number of confirmed cases.  # noqa: E501

        :return: The case of this CovidInfo.  # noqa: E501
        :rtype: float
        """
        return self._case

    @case.setter
    def case(self, case):
        """Sets the case of this CovidInfo.

        Number of confirmed cases.  # noqa: E501

        :param case: The case of this CovidInfo.  # noqa: E501
        :type: float
        """

        self._case = case

    @property
    def death(self):
        """Gets the death of this CovidInfo.  # noqa: E501

        Number of confirmed deaths.  # noqa: E501

        :return: The death of this CovidInfo.  # noqa: E501
        :rtype: float
        """
        return self._death

    @death.setter
    def death(self, death):
        """Sets the death of this CovidInfo.

        Number of confirmed deaths.  # noqa: E501

        :param death: The death of this CovidInfo.  # noqa: E501
        :type: float
        """

        self._death = death

    @property
    def updated(self):
        """Gets the updated of this CovidInfo.  # noqa: E501

        Updated time.  # noqa: E501

        :return: The updated of this CovidInfo.  # noqa: E501
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this CovidInfo.

        Updated time.  # noqa: E501

        :param updated: The updated of this CovidInfo.  # noqa: E501
        :type: str
        """

        self._updated = updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CovidInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CovidInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CovidInfo):
            return True

        return self.to_dict() != other.to_dict()
