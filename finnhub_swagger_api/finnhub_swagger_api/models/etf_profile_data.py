# coding: utf-8

"""
    Finnhub API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from finnhub_swagger_api.configuration import Configuration


class ETFProfileData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'asset_class': 'str',
        'investment_segment': 'str',
        'aum': 'float',
        'nav': 'float',
        'nav_currency': 'str',
        'expense_ratio': 'float',
        'tracking_index': 'str',
        'etf_company': 'str',
        'domicile': 'str',
        'inception_date': 'date',
        'website': 'str',
        'isin': 'str',
        'cusip': 'str',
        'price_to_earnings': 'float',
        'price_to_book': 'float',
        'avg_volume': 'float',
        'description': 'str'
    }

    attribute_map = {
        'name': 'name',
        'asset_class': 'assetClass',
        'investment_segment': 'investmentSegment',
        'aum': 'aum',
        'nav': 'nav',
        'nav_currency': 'navCurrency',
        'expense_ratio': 'expenseRatio',
        'tracking_index': 'trackingIndex',
        'etf_company': 'etfCompany',
        'domicile': 'domicile',
        'inception_date': 'inceptionDate',
        'website': 'website',
        'isin': 'isin',
        'cusip': 'cusip',
        'price_to_earnings': 'priceToEarnings',
        'price_to_book': 'priceToBook',
        'avg_volume': 'avgVolume',
        'description': 'description'
    }

    def __init__(self, name=None, asset_class=None, investment_segment=None, aum=None, nav=None, nav_currency=None, expense_ratio=None, tracking_index=None, etf_company=None, domicile=None, inception_date=None, website=None, isin=None, cusip=None, price_to_earnings=None, price_to_book=None, avg_volume=None, description=None, _configuration=None):  # noqa: E501
        """ETFProfileData - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._asset_class = None
        self._investment_segment = None
        self._aum = None
        self._nav = None
        self._nav_currency = None
        self._expense_ratio = None
        self._tracking_index = None
        self._etf_company = None
        self._domicile = None
        self._inception_date = None
        self._website = None
        self._isin = None
        self._cusip = None
        self._price_to_earnings = None
        self._price_to_book = None
        self._avg_volume = None
        self._description = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if asset_class is not None:
            self.asset_class = asset_class
        if investment_segment is not None:
            self.investment_segment = investment_segment
        if aum is not None:
            self.aum = aum
        if nav is not None:
            self.nav = nav
        if nav_currency is not None:
            self.nav_currency = nav_currency
        if expense_ratio is not None:
            self.expense_ratio = expense_ratio
        if tracking_index is not None:
            self.tracking_index = tracking_index
        if etf_company is not None:
            self.etf_company = etf_company
        if domicile is not None:
            self.domicile = domicile
        if inception_date is not None:
            self.inception_date = inception_date
        if website is not None:
            self.website = website
        if isin is not None:
            self.isin = isin
        if cusip is not None:
            self.cusip = cusip
        if price_to_earnings is not None:
            self.price_to_earnings = price_to_earnings
        if price_to_book is not None:
            self.price_to_book = price_to_book
        if avg_volume is not None:
            self.avg_volume = avg_volume
        if description is not None:
            self.description = description

    @property
    def name(self):
        """Gets the name of this ETFProfileData.  # noqa: E501

        Name  # noqa: E501

        :return: The name of this ETFProfileData.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ETFProfileData.

        Name  # noqa: E501

        :param name: The name of this ETFProfileData.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def asset_class(self):
        """Gets the asset_class of this ETFProfileData.  # noqa: E501

        Asset Class.  # noqa: E501

        :return: The asset_class of this ETFProfileData.  # noqa: E501
        :rtype: str
        """
        return self._asset_class

    @asset_class.setter
    def asset_class(self, asset_class):
        """Sets the asset_class of this ETFProfileData.

        Asset Class.  # noqa: E501

        :param asset_class: The asset_class of this ETFProfileData.  # noqa: E501
        :type: str
        """

        self._asset_class = asset_class

    @property
    def investment_segment(self):
        """Gets the investment_segment of this ETFProfileData.  # noqa: E501

        Investment Segment.  # noqa: E501

        :return: The investment_segment of this ETFProfileData.  # noqa: E501
        :rtype: str
        """
        return self._investment_segment

    @investment_segment.setter
    def investment_segment(self, investment_segment):
        """Sets the investment_segment of this ETFProfileData.

        Investment Segment.  # noqa: E501

        :param investment_segment: The investment_segment of this ETFProfileData.  # noqa: E501
        :type: str
        """

        self._investment_segment = investment_segment

    @property
    def aum(self):
        """Gets the aum of this ETFProfileData.  # noqa: E501

        AUM.  # noqa: E501

        :return: The aum of this ETFProfileData.  # noqa: E501
        :rtype: float
        """
        return self._aum

    @aum.setter
    def aum(self, aum):
        """Sets the aum of this ETFProfileData.

        AUM.  # noqa: E501

        :param aum: The aum of this ETFProfileData.  # noqa: E501
        :type: float
        """

        self._aum = aum

    @property
    def nav(self):
        """Gets the nav of this ETFProfileData.  # noqa: E501

        NAV.  # noqa: E501

        :return: The nav of this ETFProfileData.  # noqa: E501
        :rtype: float
        """
        return self._nav

    @nav.setter
    def nav(self, nav):
        """Sets the nav of this ETFProfileData.

        NAV.  # noqa: E501

        :param nav: The nav of this ETFProfileData.  # noqa: E501
        :type: float
        """

        self._nav = nav

    @property
    def nav_currency(self):
        """Gets the nav_currency of this ETFProfileData.  # noqa: E501

        NAV currency.  # noqa: E501

        :return: The nav_currency of this ETFProfileData.  # noqa: E501
        :rtype: str
        """
        return self._nav_currency

    @nav_currency.setter
    def nav_currency(self, nav_currency):
        """Sets the nav_currency of this ETFProfileData.

        NAV currency.  # noqa: E501

        :param nav_currency: The nav_currency of this ETFProfileData.  # noqa: E501
        :type: str
        """

        self._nav_currency = nav_currency

    @property
    def expense_ratio(self):
        """Gets the expense_ratio of this ETFProfileData.  # noqa: E501

        Expense ratio.  # noqa: E501

        :return: The expense_ratio of this ETFProfileData.  # noqa: E501
        :rtype: float
        """
        return self._expense_ratio

    @expense_ratio.setter
    def expense_ratio(self, expense_ratio):
        """Sets the expense_ratio of this ETFProfileData.

        Expense ratio.  # noqa: E501

        :param expense_ratio: The expense_ratio of this ETFProfileData.  # noqa: E501
        :type: float
        """

        self._expense_ratio = expense_ratio

    @property
    def tracking_index(self):
        """Gets the tracking_index of this ETFProfileData.  # noqa: E501

        Tracking Index.  # noqa: E501

        :return: The tracking_index of this ETFProfileData.  # noqa: E501
        :rtype: str
        """
        return self._tracking_index

    @tracking_index.setter
    def tracking_index(self, tracking_index):
        """Sets the tracking_index of this ETFProfileData.

        Tracking Index.  # noqa: E501

        :param tracking_index: The tracking_index of this ETFProfileData.  # noqa: E501
        :type: str
        """

        self._tracking_index = tracking_index

    @property
    def etf_company(self):
        """Gets the etf_company of this ETFProfileData.  # noqa: E501

        ETF issuer.  # noqa: E501

        :return: The etf_company of this ETFProfileData.  # noqa: E501
        :rtype: str
        """
        return self._etf_company

    @etf_company.setter
    def etf_company(self, etf_company):
        """Sets the etf_company of this ETFProfileData.

        ETF issuer.  # noqa: E501

        :param etf_company: The etf_company of this ETFProfileData.  # noqa: E501
        :type: str
        """

        self._etf_company = etf_company

    @property
    def domicile(self):
        """Gets the domicile of this ETFProfileData.  # noqa: E501

        ETF domicile.  # noqa: E501

        :return: The domicile of this ETFProfileData.  # noqa: E501
        :rtype: str
        """
        return self._domicile

    @domicile.setter
    def domicile(self, domicile):
        """Sets the domicile of this ETFProfileData.

        ETF domicile.  # noqa: E501

        :param domicile: The domicile of this ETFProfileData.  # noqa: E501
        :type: str
        """

        self._domicile = domicile

    @property
    def inception_date(self):
        """Gets the inception_date of this ETFProfileData.  # noqa: E501

        Inception date.  # noqa: E501

        :return: The inception_date of this ETFProfileData.  # noqa: E501
        :rtype: date
        """
        return self._inception_date

    @inception_date.setter
    def inception_date(self, inception_date):
        """Sets the inception_date of this ETFProfileData.

        Inception date.  # noqa: E501

        :param inception_date: The inception_date of this ETFProfileData.  # noqa: E501
        :type: date
        """

        self._inception_date = inception_date

    @property
    def website(self):
        """Gets the website of this ETFProfileData.  # noqa: E501

        ETF's website.  # noqa: E501

        :return: The website of this ETFProfileData.  # noqa: E501
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this ETFProfileData.

        ETF's website.  # noqa: E501

        :param website: The website of this ETFProfileData.  # noqa: E501
        :type: str
        """

        self._website = website

    @property
    def isin(self):
        """Gets the isin of this ETFProfileData.  # noqa: E501

        ISIN.  # noqa: E501

        :return: The isin of this ETFProfileData.  # noqa: E501
        :rtype: str
        """
        return self._isin

    @isin.setter
    def isin(self, isin):
        """Sets the isin of this ETFProfileData.

        ISIN.  # noqa: E501

        :param isin: The isin of this ETFProfileData.  # noqa: E501
        :type: str
        """

        self._isin = isin

    @property
    def cusip(self):
        """Gets the cusip of this ETFProfileData.  # noqa: E501

        CUSIP.  # noqa: E501

        :return: The cusip of this ETFProfileData.  # noqa: E501
        :rtype: str
        """
        return self._cusip

    @cusip.setter
    def cusip(self, cusip):
        """Sets the cusip of this ETFProfileData.

        CUSIP.  # noqa: E501

        :param cusip: The cusip of this ETFProfileData.  # noqa: E501
        :type: str
        """

        self._cusip = cusip

    @property
    def price_to_earnings(self):
        """Gets the price_to_earnings of this ETFProfileData.  # noqa: E501

        P/E.  # noqa: E501

        :return: The price_to_earnings of this ETFProfileData.  # noqa: E501
        :rtype: float
        """
        return self._price_to_earnings

    @price_to_earnings.setter
    def price_to_earnings(self, price_to_earnings):
        """Sets the price_to_earnings of this ETFProfileData.

        P/E.  # noqa: E501

        :param price_to_earnings: The price_to_earnings of this ETFProfileData.  # noqa: E501
        :type: float
        """

        self._price_to_earnings = price_to_earnings

    @property
    def price_to_book(self):
        """Gets the price_to_book of this ETFProfileData.  # noqa: E501

        P/B.  # noqa: E501

        :return: The price_to_book of this ETFProfileData.  # noqa: E501
        :rtype: float
        """
        return self._price_to_book

    @price_to_book.setter
    def price_to_book(self, price_to_book):
        """Sets the price_to_book of this ETFProfileData.

        P/B.  # noqa: E501

        :param price_to_book: The price_to_book of this ETFProfileData.  # noqa: E501
        :type: float
        """

        self._price_to_book = price_to_book

    @property
    def avg_volume(self):
        """Gets the avg_volume of this ETFProfileData.  # noqa: E501

        30-day average volume.  # noqa: E501

        :return: The avg_volume of this ETFProfileData.  # noqa: E501
        :rtype: float
        """
        return self._avg_volume

    @avg_volume.setter
    def avg_volume(self, avg_volume):
        """Sets the avg_volume of this ETFProfileData.

        30-day average volume.  # noqa: E501

        :param avg_volume: The avg_volume of this ETFProfileData.  # noqa: E501
        :type: float
        """

        self._avg_volume = avg_volume

    @property
    def description(self):
        """Gets the description of this ETFProfileData.  # noqa: E501

        ETF's description.  # noqa: E501

        :return: The description of this ETFProfileData.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ETFProfileData.

        ETF's description.  # noqa: E501

        :param description: The description of this ETFProfileData.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ETFProfileData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ETFProfileData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ETFProfileData):
            return True

        return self.to_dict() != other.to_dict()
