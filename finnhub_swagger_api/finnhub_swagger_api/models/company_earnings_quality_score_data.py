# coding: utf-8

"""
    Finnhub API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from finnhub_swagger_api.configuration import Configuration


class CompanyEarningsQualityScoreData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'period': 'str',
        'growth': 'float',
        'profitability': 'float',
        'cash_generation_capital_allocation': 'float',
        'leverage': 'float',
        'score': 'float',
        'letter_score': 'str'
    }

    attribute_map = {
        'period': 'period',
        'growth': 'growth',
        'profitability': 'profitability',
        'cash_generation_capital_allocation': 'cashGenerationCapitalAllocation',
        'leverage': 'leverage',
        'score': 'score',
        'letter_score': 'letterScore'
    }

    def __init__(self, period=None, growth=None, profitability=None, cash_generation_capital_allocation=None, leverage=None, score=None, letter_score=None, _configuration=None):  # noqa: E501
        """CompanyEarningsQualityScoreData - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._period = None
        self._growth = None
        self._profitability = None
        self._cash_generation_capital_allocation = None
        self._leverage = None
        self._score = None
        self._letter_score = None
        self.discriminator = None

        if period is not None:
            self.period = period
        if growth is not None:
            self.growth = growth
        if profitability is not None:
            self.profitability = profitability
        if cash_generation_capital_allocation is not None:
            self.cash_generation_capital_allocation = cash_generation_capital_allocation
        if leverage is not None:
            self.leverage = leverage
        if score is not None:
            self.score = score
        if letter_score is not None:
            self.letter_score = letter_score

    @property
    def period(self):
        """Gets the period of this CompanyEarningsQualityScoreData.  # noqa: E501

        Period  # noqa: E501

        :return: The period of this CompanyEarningsQualityScoreData.  # noqa: E501
        :rtype: str
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this CompanyEarningsQualityScoreData.

        Period  # noqa: E501

        :param period: The period of this CompanyEarningsQualityScoreData.  # noqa: E501
        :type: str
        """

        self._period = period

    @property
    def growth(self):
        """Gets the growth of this CompanyEarningsQualityScoreData.  # noqa: E501

        Growth Score  # noqa: E501

        :return: The growth of this CompanyEarningsQualityScoreData.  # noqa: E501
        :rtype: float
        """
        return self._growth

    @growth.setter
    def growth(self, growth):
        """Sets the growth of this CompanyEarningsQualityScoreData.

        Growth Score  # noqa: E501

        :param growth: The growth of this CompanyEarningsQualityScoreData.  # noqa: E501
        :type: float
        """

        self._growth = growth

    @property
    def profitability(self):
        """Gets the profitability of this CompanyEarningsQualityScoreData.  # noqa: E501

        Profitability Score  # noqa: E501

        :return: The profitability of this CompanyEarningsQualityScoreData.  # noqa: E501
        :rtype: float
        """
        return self._profitability

    @profitability.setter
    def profitability(self, profitability):
        """Sets the profitability of this CompanyEarningsQualityScoreData.

        Profitability Score  # noqa: E501

        :param profitability: The profitability of this CompanyEarningsQualityScoreData.  # noqa: E501
        :type: float
        """

        self._profitability = profitability

    @property
    def cash_generation_capital_allocation(self):
        """Gets the cash_generation_capital_allocation of this CompanyEarningsQualityScoreData.  # noqa: E501

        Cash Generation and Capital Allocation  # noqa: E501

        :return: The cash_generation_capital_allocation of this CompanyEarningsQualityScoreData.  # noqa: E501
        :rtype: float
        """
        return self._cash_generation_capital_allocation

    @cash_generation_capital_allocation.setter
    def cash_generation_capital_allocation(self, cash_generation_capital_allocation):
        """Sets the cash_generation_capital_allocation of this CompanyEarningsQualityScoreData.

        Cash Generation and Capital Allocation  # noqa: E501

        :param cash_generation_capital_allocation: The cash_generation_capital_allocation of this CompanyEarningsQualityScoreData.  # noqa: E501
        :type: float
        """

        self._cash_generation_capital_allocation = cash_generation_capital_allocation

    @property
    def leverage(self):
        """Gets the leverage of this CompanyEarningsQualityScoreData.  # noqa: E501

        Leverage Score  # noqa: E501

        :return: The leverage of this CompanyEarningsQualityScoreData.  # noqa: E501
        :rtype: float
        """
        return self._leverage

    @leverage.setter
    def leverage(self, leverage):
        """Sets the leverage of this CompanyEarningsQualityScoreData.

        Leverage Score  # noqa: E501

        :param leverage: The leverage of this CompanyEarningsQualityScoreData.  # noqa: E501
        :type: float
        """

        self._leverage = leverage

    @property
    def score(self):
        """Gets the score of this CompanyEarningsQualityScoreData.  # noqa: E501

        Total Score  # noqa: E501

        :return: The score of this CompanyEarningsQualityScoreData.  # noqa: E501
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this CompanyEarningsQualityScoreData.

        Total Score  # noqa: E501

        :param score: The score of this CompanyEarningsQualityScoreData.  # noqa: E501
        :type: float
        """

        self._score = score

    @property
    def letter_score(self):
        """Gets the letter_score of this CompanyEarningsQualityScoreData.  # noqa: E501

        Letter Score  # noqa: E501

        :return: The letter_score of this CompanyEarningsQualityScoreData.  # noqa: E501
        :rtype: str
        """
        return self._letter_score

    @letter_score.setter
    def letter_score(self, letter_score):
        """Sets the letter_score of this CompanyEarningsQualityScoreData.

        Letter Score  # noqa: E501

        :param letter_score: The letter_score of this CompanyEarningsQualityScoreData.  # noqa: E501
        :type: str
        """

        self._letter_score = letter_score

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CompanyEarningsQualityScoreData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompanyEarningsQualityScoreData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CompanyEarningsQualityScoreData):
            return True

        return self.to_dict() != other.to_dict()
