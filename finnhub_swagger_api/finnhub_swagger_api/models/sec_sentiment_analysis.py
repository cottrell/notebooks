# coding: utf-8

"""
    Finnhub API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from finnhub_swagger_api.configuration import Configuration


class SECSentimentAnalysis(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_number': 'str',
        'symbol': 'str',
        'cik': 'str',
        'sentiment': 'FilingSentiment'
    }

    attribute_map = {
        'access_number': 'accessNumber',
        'symbol': 'symbol',
        'cik': 'cik',
        'sentiment': 'sentiment'
    }

    def __init__(self, access_number=None, symbol=None, cik=None, sentiment=None, _configuration=None):  # noqa: E501
        """SECSentimentAnalysis - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._access_number = None
        self._symbol = None
        self._cik = None
        self._sentiment = None
        self.discriminator = None

        if access_number is not None:
            self.access_number = access_number
        if symbol is not None:
            self.symbol = symbol
        if cik is not None:
            self.cik = cik
        if sentiment is not None:
            self.sentiment = sentiment

    @property
    def access_number(self):
        """Gets the access_number of this SECSentimentAnalysis.  # noqa: E501

        Access number.  # noqa: E501

        :return: The access_number of this SECSentimentAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._access_number

    @access_number.setter
    def access_number(self, access_number):
        """Sets the access_number of this SECSentimentAnalysis.

        Access number.  # noqa: E501

        :param access_number: The access_number of this SECSentimentAnalysis.  # noqa: E501
        :type: str
        """

        self._access_number = access_number

    @property
    def symbol(self):
        """Gets the symbol of this SECSentimentAnalysis.  # noqa: E501

        Symbol.  # noqa: E501

        :return: The symbol of this SECSentimentAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this SECSentimentAnalysis.

        Symbol.  # noqa: E501

        :param symbol: The symbol of this SECSentimentAnalysis.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def cik(self):
        """Gets the cik of this SECSentimentAnalysis.  # noqa: E501

        CIK.  # noqa: E501

        :return: The cik of this SECSentimentAnalysis.  # noqa: E501
        :rtype: str
        """
        return self._cik

    @cik.setter
    def cik(self, cik):
        """Sets the cik of this SECSentimentAnalysis.

        CIK.  # noqa: E501

        :param cik: The cik of this SECSentimentAnalysis.  # noqa: E501
        :type: str
        """

        self._cik = cik

    @property
    def sentiment(self):
        """Gets the sentiment of this SECSentimentAnalysis.  # noqa: E501

        Filing Sentiment  # noqa: E501

        :return: The sentiment of this SECSentimentAnalysis.  # noqa: E501
        :rtype: FilingSentiment
        """
        return self._sentiment

    @sentiment.setter
    def sentiment(self, sentiment):
        """Sets the sentiment of this SECSentimentAnalysis.

        Filing Sentiment  # noqa: E501

        :param sentiment: The sentiment of this SECSentimentAnalysis.  # noqa: E501
        :type: FilingSentiment
        """

        self._sentiment = sentiment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SECSentimentAnalysis, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SECSentimentAnalysis):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SECSentimentAnalysis):
            return True

        return self.to_dict() != other.to_dict()
