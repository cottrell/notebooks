# coding: utf-8

"""
    Finnhub API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from finnhub_swagger_api.configuration import Configuration


class CountryMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'country': 'str',
        'code2': 'str',
        'code3': 'str',
        'code_no': 'str',
        'currency': 'str',
        'currency_code': 'str',
        'region': 'str',
        'sub_region': 'str'
    }

    attribute_map = {
        'country': 'country',
        'code2': 'code2',
        'code3': 'code3',
        'code_no': 'codeNo',
        'currency': 'currency',
        'currency_code': 'currencyCode',
        'region': 'region',
        'sub_region': 'subRegion'
    }

    def __init__(self, country=None, code2=None, code3=None, code_no=None, currency=None, currency_code=None, region=None, sub_region=None, _configuration=None):  # noqa: E501
        """CountryMetadata - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._country = None
        self._code2 = None
        self._code3 = None
        self._code_no = None
        self._currency = None
        self._currency_code = None
        self._region = None
        self._sub_region = None
        self.discriminator = None

        if country is not None:
            self.country = country
        if code2 is not None:
            self.code2 = code2
        if code3 is not None:
            self.code3 = code3
        if code_no is not None:
            self.code_no = code_no
        if currency is not None:
            self.currency = currency
        if currency_code is not None:
            self.currency_code = currency_code
        if region is not None:
            self.region = region
        if sub_region is not None:
            self.sub_region = sub_region

    @property
    def country(self):
        """Gets the country of this CountryMetadata.  # noqa: E501

        Country name  # noqa: E501

        :return: The country of this CountryMetadata.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this CountryMetadata.

        Country name  # noqa: E501

        :param country: The country of this CountryMetadata.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def code2(self):
        """Gets the code2 of this CountryMetadata.  # noqa: E501

        Alpha 2 code  # noqa: E501

        :return: The code2 of this CountryMetadata.  # noqa: E501
        :rtype: str
        """
        return self._code2

    @code2.setter
    def code2(self, code2):
        """Sets the code2 of this CountryMetadata.

        Alpha 2 code  # noqa: E501

        :param code2: The code2 of this CountryMetadata.  # noqa: E501
        :type: str
        """

        self._code2 = code2

    @property
    def code3(self):
        """Gets the code3 of this CountryMetadata.  # noqa: E501

        Alpha 3 code  # noqa: E501

        :return: The code3 of this CountryMetadata.  # noqa: E501
        :rtype: str
        """
        return self._code3

    @code3.setter
    def code3(self, code3):
        """Sets the code3 of this CountryMetadata.

        Alpha 3 code  # noqa: E501

        :param code3: The code3 of this CountryMetadata.  # noqa: E501
        :type: str
        """

        self._code3 = code3

    @property
    def code_no(self):
        """Gets the code_no of this CountryMetadata.  # noqa: E501

        UN code  # noqa: E501

        :return: The code_no of this CountryMetadata.  # noqa: E501
        :rtype: str
        """
        return self._code_no

    @code_no.setter
    def code_no(self, code_no):
        """Sets the code_no of this CountryMetadata.

        UN code  # noqa: E501

        :param code_no: The code_no of this CountryMetadata.  # noqa: E501
        :type: str
        """

        self._code_no = code_no

    @property
    def currency(self):
        """Gets the currency of this CountryMetadata.  # noqa: E501

        Currency name  # noqa: E501

        :return: The currency of this CountryMetadata.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CountryMetadata.

        Currency name  # noqa: E501

        :param currency: The currency of this CountryMetadata.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def currency_code(self):
        """Gets the currency_code of this CountryMetadata.  # noqa: E501

        Currency code  # noqa: E501

        :return: The currency_code of this CountryMetadata.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this CountryMetadata.

        Currency code  # noqa: E501

        :param currency_code: The currency_code of this CountryMetadata.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def region(self):
        """Gets the region of this CountryMetadata.  # noqa: E501

        Region  # noqa: E501

        :return: The region of this CountryMetadata.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this CountryMetadata.

        Region  # noqa: E501

        :param region: The region of this CountryMetadata.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def sub_region(self):
        """Gets the sub_region of this CountryMetadata.  # noqa: E501

        Sub-Region  # noqa: E501

        :return: The sub_region of this CountryMetadata.  # noqa: E501
        :rtype: str
        """
        return self._sub_region

    @sub_region.setter
    def sub_region(self, sub_region):
        """Sets the sub_region of this CountryMetadata.

        Sub-Region  # noqa: E501

        :param sub_region: The sub_region of this CountryMetadata.  # noqa: E501
        :type: str
        """

        self._sub_region = sub_region

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CountryMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CountryMetadata):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CountryMetadata):
            return True

        return self.to_dict() != other.to_dict()
