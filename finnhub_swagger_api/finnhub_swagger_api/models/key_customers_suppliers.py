# coding: utf-8

"""
    Finnhub API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from finnhub_swagger_api.configuration import Configuration


class KeyCustomersSuppliers(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'symbol': 'str',
        'name': 'str',
        'customer': 'bool',
        'supplier': 'bool',
        'one_month_correlation': 'float',
        'one_year_correlation': 'float',
        'six_month_correlation': 'float',
        'three_month_correlation': 'float',
        'two_week_correlation': 'float',
        'two_year_correlation': 'float'
    }

    attribute_map = {
        'symbol': 'symbol',
        'name': 'name',
        'customer': 'customer',
        'supplier': 'supplier',
        'one_month_correlation': 'oneMonthCorrelation',
        'one_year_correlation': 'oneYearCorrelation',
        'six_month_correlation': 'sixMonthCorrelation',
        'three_month_correlation': 'threeMonthCorrelation',
        'two_week_correlation': 'twoWeekCorrelation',
        'two_year_correlation': 'twoYearCorrelation'
    }

    def __init__(self, symbol=None, name=None, customer=None, supplier=None, one_month_correlation=None, one_year_correlation=None, six_month_correlation=None, three_month_correlation=None, two_week_correlation=None, two_year_correlation=None, _configuration=None):  # noqa: E501
        """KeyCustomersSuppliers - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._symbol = None
        self._name = None
        self._customer = None
        self._supplier = None
        self._one_month_correlation = None
        self._one_year_correlation = None
        self._six_month_correlation = None
        self._three_month_correlation = None
        self._two_week_correlation = None
        self._two_year_correlation = None
        self.discriminator = None

        if symbol is not None:
            self.symbol = symbol
        if name is not None:
            self.name = name
        if customer is not None:
            self.customer = customer
        if supplier is not None:
            self.supplier = supplier
        if one_month_correlation is not None:
            self.one_month_correlation = one_month_correlation
        if one_year_correlation is not None:
            self.one_year_correlation = one_year_correlation
        if six_month_correlation is not None:
            self.six_month_correlation = six_month_correlation
        if three_month_correlation is not None:
            self.three_month_correlation = three_month_correlation
        if two_week_correlation is not None:
            self.two_week_correlation = two_week_correlation
        if two_year_correlation is not None:
            self.two_year_correlation = two_year_correlation

    @property
    def symbol(self):
        """Gets the symbol of this KeyCustomersSuppliers.  # noqa: E501

        Symbol  # noqa: E501

        :return: The symbol of this KeyCustomersSuppliers.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this KeyCustomersSuppliers.

        Symbol  # noqa: E501

        :param symbol: The symbol of this KeyCustomersSuppliers.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def name(self):
        """Gets the name of this KeyCustomersSuppliers.  # noqa: E501

        Name  # noqa: E501

        :return: The name of this KeyCustomersSuppliers.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this KeyCustomersSuppliers.

        Name  # noqa: E501

        :param name: The name of this KeyCustomersSuppliers.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def customer(self):
        """Gets the customer of this KeyCustomersSuppliers.  # noqa: E501

        Whether the company is a customer.  # noqa: E501

        :return: The customer of this KeyCustomersSuppliers.  # noqa: E501
        :rtype: bool
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this KeyCustomersSuppliers.

        Whether the company is a customer.  # noqa: E501

        :param customer: The customer of this KeyCustomersSuppliers.  # noqa: E501
        :type: bool
        """

        self._customer = customer

    @property
    def supplier(self):
        """Gets the supplier of this KeyCustomersSuppliers.  # noqa: E501

        Whether the company is a supplier  # noqa: E501

        :return: The supplier of this KeyCustomersSuppliers.  # noqa: E501
        :rtype: bool
        """
        return self._supplier

    @supplier.setter
    def supplier(self, supplier):
        """Sets the supplier of this KeyCustomersSuppliers.

        Whether the company is a supplier  # noqa: E501

        :param supplier: The supplier of this KeyCustomersSuppliers.  # noqa: E501
        :type: bool
        """

        self._supplier = supplier

    @property
    def one_month_correlation(self):
        """Gets the one_month_correlation of this KeyCustomersSuppliers.  # noqa: E501

        1-month price correlation  # noqa: E501

        :return: The one_month_correlation of this KeyCustomersSuppliers.  # noqa: E501
        :rtype: float
        """
        return self._one_month_correlation

    @one_month_correlation.setter
    def one_month_correlation(self, one_month_correlation):
        """Sets the one_month_correlation of this KeyCustomersSuppliers.

        1-month price correlation  # noqa: E501

        :param one_month_correlation: The one_month_correlation of this KeyCustomersSuppliers.  # noqa: E501
        :type: float
        """

        self._one_month_correlation = one_month_correlation

    @property
    def one_year_correlation(self):
        """Gets the one_year_correlation of this KeyCustomersSuppliers.  # noqa: E501

        1-year price correlation  # noqa: E501

        :return: The one_year_correlation of this KeyCustomersSuppliers.  # noqa: E501
        :rtype: float
        """
        return self._one_year_correlation

    @one_year_correlation.setter
    def one_year_correlation(self, one_year_correlation):
        """Sets the one_year_correlation of this KeyCustomersSuppliers.

        1-year price correlation  # noqa: E501

        :param one_year_correlation: The one_year_correlation of this KeyCustomersSuppliers.  # noqa: E501
        :type: float
        """

        self._one_year_correlation = one_year_correlation

    @property
    def six_month_correlation(self):
        """Gets the six_month_correlation of this KeyCustomersSuppliers.  # noqa: E501

        6-month price correlation  # noqa: E501

        :return: The six_month_correlation of this KeyCustomersSuppliers.  # noqa: E501
        :rtype: float
        """
        return self._six_month_correlation

    @six_month_correlation.setter
    def six_month_correlation(self, six_month_correlation):
        """Sets the six_month_correlation of this KeyCustomersSuppliers.

        6-month price correlation  # noqa: E501

        :param six_month_correlation: The six_month_correlation of this KeyCustomersSuppliers.  # noqa: E501
        :type: float
        """

        self._six_month_correlation = six_month_correlation

    @property
    def three_month_correlation(self):
        """Gets the three_month_correlation of this KeyCustomersSuppliers.  # noqa: E501

        3-month price correlation  # noqa: E501

        :return: The three_month_correlation of this KeyCustomersSuppliers.  # noqa: E501
        :rtype: float
        """
        return self._three_month_correlation

    @three_month_correlation.setter
    def three_month_correlation(self, three_month_correlation):
        """Sets the three_month_correlation of this KeyCustomersSuppliers.

        3-month price correlation  # noqa: E501

        :param three_month_correlation: The three_month_correlation of this KeyCustomersSuppliers.  # noqa: E501
        :type: float
        """

        self._three_month_correlation = three_month_correlation

    @property
    def two_week_correlation(self):
        """Gets the two_week_correlation of this KeyCustomersSuppliers.  # noqa: E501

        2-week price correlation  # noqa: E501

        :return: The two_week_correlation of this KeyCustomersSuppliers.  # noqa: E501
        :rtype: float
        """
        return self._two_week_correlation

    @two_week_correlation.setter
    def two_week_correlation(self, two_week_correlation):
        """Sets the two_week_correlation of this KeyCustomersSuppliers.

        2-week price correlation  # noqa: E501

        :param two_week_correlation: The two_week_correlation of this KeyCustomersSuppliers.  # noqa: E501
        :type: float
        """

        self._two_week_correlation = two_week_correlation

    @property
    def two_year_correlation(self):
        """Gets the two_year_correlation of this KeyCustomersSuppliers.  # noqa: E501

        2-year price correlation  # noqa: E501

        :return: The two_year_correlation of this KeyCustomersSuppliers.  # noqa: E501
        :rtype: float
        """
        return self._two_year_correlation

    @two_year_correlation.setter
    def two_year_correlation(self, two_year_correlation):
        """Sets the two_year_correlation of this KeyCustomersSuppliers.

        2-year price correlation  # noqa: E501

        :param two_year_correlation: The two_year_correlation of this KeyCustomersSuppliers.  # noqa: E501
        :type: float
        """

        self._two_year_correlation = two_year_correlation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KeyCustomersSuppliers, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KeyCustomersSuppliers):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, KeyCustomersSuppliers):
            return True

        return self.to_dict() != other.to_dict()
